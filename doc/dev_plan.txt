All projects, coding and otherwise, boil down to two fundamental questions- what should we do, and how should we do it? Learning computer programming is largely about the latter. Implementing a large project is as much or more about the former.

------------

Q: How do you eat an elephant?
A: One bite at a time.
Addendum: Which bites are taken when is key to success.

------------

Having handled a couple of items it's a good time to re-visit the task list - remove completed items, add new ones, and figure out priorities for next steps.
- advancement
- items & inventory
- the UI loop and timing
- equipment
- key binding system
- help system (at the least, list available actions / commands)
- random tables (ways of selecting at random from a weighted and possibly dynamic set)
- improved map generation
- flesh out handling of messages to the player

I was going to take on key bindings or active mobs & UI loop, but I've just realized that I really should be the player message system straightened out before I go any further. The extremely simple visuals of a roguelike means that the messages to the player are one of the main ways that the player knows what's going on. Before I start on having more stuff going on I need to make sure than I can properly communicate with the player.

Messaging has these main sub-components:
DONE - sending a message
DONE - displaying sent messages
DONE - hiding / no longer showing old messages
DONE - archiving hidden messages (and capping the archive size)
- seeing archived messages
- dealing with repeated messages
- persist message stuff

The first three points are the main ones on which I'll focus. Depending on how that goes I might try to get the other pieces done for this milestone as well.
