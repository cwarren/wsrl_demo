All projects, coding and otherwise, boil down to two fundamental questions- what should we do, and how should we do it? Learning computer programming is largely about the latter. Implementing a large project is as much or more about the former.

------------

Q: How do you eat an elephant?
A: One bite at a time.
Addendum: Which bites are taken when is key to success.

------------

Having handled a couple of items it's a good time to re-visit the task list - remove completed items, add new ones, and figure out priorities for next steps.
- advancement
- items & inventory
- equipment
- key binding system
- help system (at the least, list available actions / commands); begin gamePlay sub-modes
- random tables (ways of selecting at random from a weighted and possibly dynamic set)
- improved map generation
- real game win / lose conditions
- ipad compatibility
- map visibility limits; FOV, LOS, and all that jazz
- remembered map

I think it's time to tackle key binding. In essence, this is untangling the keys that the player presses from the commands the player is trying to use. Instead of the handleInput method of the uimodes interpreting the keyboard events they will delegate that to a sub-system and then will focus on the actual commands being issued. This provides:
- easier extensibility
- centralized input processing, which reduces error opportunities
- support for multiple key binding sets (e.g. a PC layout vs a Mac layout)
- automatically generated help
- clearer code - easier to read, and more informative

TODO: refactor keybinding to move the binding info into the same general hash as the action definitions - make it easier to ensure that each action is covered by all keybinding sets
DONE  - restructure action hash
DONE  - re=do calcBindingLookups to work with new structure
DONE  - re-do useKeyBinding to do things differently using the new structure (mainly just storing the binding set key)
TODO:
DONE wasd key binding set,
DONE command to switch between them

The help system will be the next milestone after key binding. It will introduce uimode sub-systems.... perhaps, as well as add a couple of new commands.
