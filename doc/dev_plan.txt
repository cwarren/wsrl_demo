All projects, coding and otherwise, boil down to two fundamental questions- what should we do, and how should we do it? Learning computer programming is largely about the latter. Implementing a large project is as much or more about the former.

------------

Q: How do you eat an elephant?
A: One bite at a time.
Addendum: Which bites are taken when is key to success.

------------

Some of the tasks that would need to be done for a full game aren't really necessary for a base game, so I'm (at least for now) setting them aside. I'm also far enough along that I'm going to put a bit of thought into ordering the milestone list at this point.
Base game:
- avatar info display (more than just map coords)
- item and entity descriptions; calculating item and entity stats for player viewing
- hunger, food, and eating

- looking at things (targeting)
- equipment
- improved map generation - random seeds for maps? seeding items? connected maps?
- improved map persistence - saving the RNG state
Later:
- random tables (ways of selecting at random from a weighted and possibly dynamic set)
- treasure drops
- throwing things & ranged combat
- map modification - digging
- ongoing actions
- avatar advancement - experience and improvement
- game scoring
- multiple maps and moving between them
- improved map tiles and generation - more tile types, variable digging
- improved combat mechanics
- ipad compatibility (capturing input, figuring out key bindings)

DONE Fancier avatar info is very simple - just adding a bit more to the renderAvatarInfo method of the gamePlay UIMode.

DONE Item and entity info will use the same general mechanism of adding a getStats listener to each mixin and then compiling the results. It'll need some general info as well (e.g. the name), so I'll add a getDescription method to SymbolActive. This won't actually display anything but will return a string that can be used as needed.

DONE To have item examination give something besides the fixed description the examined item will need some more stats. I'll want an item mixin for which it makes sense to have a getStats listener. Basic food items are pretty straightforward, so I'll go ahead and implement some food, and might as well do hunger and eating while I'm at it.

DONE hunger - a counter which is decremented each time the avatar completes a turn (possibly depending on the duration of the turn)
DONE starvation - if the hunger counter gets too low the avatar dies
DONE status message - add hunger status to avatar info, and send messages to the player when hunger status changes
DONE eating - consumes/destroys an edible item to increase the hunger counter by some amount
DONE edible - has a food value, getStats says what the food value is
DONE eat screen - select a single item from a list filtered by hasMixin('Edible') and eat it (NOTE: will have to handle the situation where the filter function leaves nothing to select)
