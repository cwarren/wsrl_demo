All projects, coding and otherwise, boil down to two fundamental questions- what should we do, and how should we do it? Learning computer programming is largely about the latter. Implementing a large project is as much or more about the former.

------------

Q: How do you eat an elephant?
A: One bite at a time.
Addendum: Which bites are taken when is key to success.

------------

Some of the tasks that would need to be done for a full game aren't really necessary for a base game, so I'm (at least for now) setting them aside. I'm also far enough along that I'm going to put a bit of thought into ordering the milestone list at this point.
Base game:
- mobs that attack the player, enhanced combat
- real game win / lose conditions
- map visibility limits; FOV, LOS, and all that jazz
- remembered map
- map modification - digging
- items & active symbols
- hunger, food, and eating
- equipment
- treasure drops
- improved map generation - random seeds for maps? seeding items?
Later:
- ongoing actions
- avatar advancement - experience and improvement
- game scoring
- random tables (ways of selecting at random from a weighted and possibly dynamic set)
- multiple maps and moving between them
- improved map tiles and generation - more tile types, variable digging
- throwing things & ranged combat
- improved combat mechanics
- ipad compatibility (capturing input, figuring out key bindings)


Simple mobs that attack the player has two main pieces in my mind. First, a new mob that has the MeleeAttacker mixin. Second, a more interesting AI that chases the player. Probably want to fold non-standard (and different from each other) move and attack durations in this as well.

'Chase the player' implies 'see the player', which means that this milestone will probably also tackle basic entity FoV and sight radius stuff (but not LoS), as well as basic pathing. Good thing the attacking part of things is nice and simple, and rot.js does a lot of the heavy lifting for FoV and LoS...
